const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
require('dotenv').config();
const User = require('../models/User');
const mongoSanitize = require('express-mongo-sanitize');
const passwordValidator = require('password-validator');
const schema = new passwordValidator;

schema
.is().min(8)                                    // Minimum length 8
.is().max(100)                                  // Maximum length 100
.has().uppercase()                              // Must have uppercase letters
.has().lowercase()                              // Must have lowercase letters
.has().digits(2)                                // Must have at least 2 digits
.has().not().spaces()                           // Should not have spaces
.is().not().oneOf(['Passw0rd', 'Password123']); // Blacklist these values

exports.singup = (req, res, next) => {
    const email = mongoSanitize.sanitize(req.body.email);
    const password = mongoSanitize.sanitize(req.body.password);
    const buffer = Buffer.from(email);
    const maskedEmail = buffer.toString('base64');
    if (schema.validate(password)) {
        bcrypt.hash(password, 10)
            .then(hash => {
                const user = new User({
                    email: maskedEmail,
                    password: hash
                });
                user.save()
                    .then(() => res.status(201).json({ message: "Neuvel utilisateur cree" }))
                    .catch(err => res.status(400).json({ err }));
            })
            .catch(error => res.status(500).json({ error }));
    } else {
        res.status(401).json({ error: "Mot de passe invalide" })
    }
};

exports.login = (req, res, next) => {
    const email = mongoSanitize.sanitize(req.body.email);
    const password = mongoSanitize.sanitize(req.body.password);
    const buffer = Buffer.from(email);
    const maskedEmail = buffer.toString('base64');
    User.findOne({email: maskedEmail})
        .then(user =>{
            if(!user){
                return res.status(401).json({ error: "Utilisateur non trouvÃ© !" });
            }
            bcrypt.compare(password, user.password)
                .then(valid => {
                    if(!valid) {
                        return res.status(401).json({ error: "Mot de passe incorrect !" });
                    } else {
                        res.status(200).json({
                            userId: user_id,
                            token: jwt.sign({ userId: user_id}, process.env.TOKEN,
                            { expiresIn: '1h' })
                        });
                    };
                })
                .catch( error => res.status(500).json({ error }));
        })
        .catch( error => res.status(500).json({ error }));
};